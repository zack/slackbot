name: build_and_deploy_service
concurrency: "deploy"
on:
  push:
    branches: "main"

env:
  SERVICE_NAME: "slackbot"
  ORG_NAME: "dhun9" # dockerhub username
  ENVIRONMENT: "dev"

jobs:
  build-service:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Build vars
        id: vars
        run: |
          echo "image=$ORG_NAME/$SERVICE_NAME:$GITHUB_SHA" >> $GITHUB_OUTPUT
          echo "latest=$ORG_NAME/$SERVICE_NAME:latest" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_DEPLOY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.vars.outputs.image }}, ${{ steps.vars.outputs.latest }}

    outputs:
      image: ${{ steps.vars.outputs.image }}
      latest: ${{ steps.vars.outputs.latest }}

  deploy-service-production:
    needs: [build-service]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install essentials
        run: |
          # install LightsailCTL Plugin (https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-install-software)
          sudo apt-get update && sudo apt-get -y install curl jq
          curl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl -o /usr/local/bin/lightsailctl
          chmod +x /usr/local/bin/lightsailctl

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_DEPLOY_TOKEN }}

      - name: Release to Amazon Lightsail
        env:
          CONTAINER_SERVICE_NAME: ${{ env.ENVIRONMENT }}-${{ env.SERVICE_NAME }}-cs
        run: |
          echo "Releasing to Amazon Lightsail"

          docker pull $ORG_NAME/$SERVICE_NAME:$GITHUB_SHA

          # upload the docker image for this pipeline
          aws lightsail push-container-image \
            --service-name $CONTAINER_SERVICE_NAME  \
            --label ${{ env.SERVICE_NAME }}-latest  \
            --image $ORG_NAME/$SERVICE_NAME:$GITHUB_SHA

          # get uploaded image (its different every time)
          IMAGE_TAG=$(aws lightsail get-container-images --service $CONTAINER_SERVICE_NAME | jq -r .containerImages[0].image)

          # create a deployment with uploaded docker image
          aws lightsail create-container-service-deployment \
            --service-name $CONTAINER_SERVICE_NAME \
            --containers "{
              \"$CONTAINER_SERVICE_NAME\": {
                \"image\": \"$IMAGE_TAG\",
                \"environment\": {
                  \"NODE_ENV\": \"production\",
                  \"DB_HOST\": \"${{ secrets.DB_HOST }}\",
                  \"DB_USER\": \"${{ secrets.DB_USER }}\",
                  \"DB_PASS\": \"${{ secrets.DB_PASS }}\",
                  \"DB_PORT\": \"${{ secrets.DB_PORT }}\",
                  \"ORM_TYPE\": \"mysql\",
                  \"DB_NAME\": \"${{ secrets.DB_NAME }}\",
                  \"LOG_LEVEL\": \"info\",
                  \"SLACK_SIGNING_SECRET\": \"${{ secrets.SLACK_SIGNING_SECRET }}\",
                  \"SLACK_BOT_TOKEN\": \"${{ secrets.SLACK_BOT_TOKEN }}\"
                },
                \"ports\": {
                  \"3050\": \"HTTP\"
                }
              }
            }" \
            --public-endpoint "{
              \"containerName\": \"$CONTAINER_SERVICE_NAME\",
              \"containerPort\": 3050,
              \"healthCheck\": {
                \"path\": \"/ping\",
                \"intervalSeconds\": 10
              }
            }"
